// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rinvgamma
double rinvgamma(double shape, double scale);
RcppExport SEXP _msMK_rinvgamma(SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvgamma(shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// dmsMK
Rcpp::NumericVector dmsMK(const arma::mat& x, const arma::mat& TH, const arma::cube& SIG, const arma::cube& thrs, const std::vector<double>& prob, bool indep);
RcppExport SEXP _msMK_dmsMK(SEXP xSEXP, SEXP THSEXP, SEXP SIGSEXP, SEXP thrsSEXP, SEXP probSEXP, SEXP indepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type TH(THSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIG(SIGSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type thrs(thrsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< bool >::type indep(indepSEXP);
    rcpp_result_gen = Rcpp::wrap(dmsMK(x, TH, SIG, thrs, prob, indep));
    return rcpp_result_gen;
END_RCPP
}
// msMK_mcmc_test
Rcpp::List msMK_mcmc_test(const int& sample, const arma::mat& y, const int& a, const int& b, const double& delta, const int& smax, const arma::vec& mu0, const arma::vec& k0, const arma::mat& sig0, bool indep, const arma::mat& lbNumpy, const arma::mat& ubNumpy, const int& burnin);
RcppExport SEXP _msMK_msMK_mcmc_test(SEXP sampleSEXP, SEXP ySEXP, SEXP aSEXP, SEXP bSEXP, SEXP deltaSEXP, SEXP smaxSEXP, SEXP mu0SEXP, SEXP k0SEXP, SEXP sig0SEXP, SEXP indepSEXP, SEXP lbNumpySEXP, SEXP ubNumpySEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const int& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type smax(smaxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig0(sig0SEXP);
    Rcpp::traits::input_parameter< bool >::type indep(indepSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lbNumpy(lbNumpySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ubNumpy(ubNumpySEXP);
    Rcpp::traits::input_parameter< const int& >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(msMK_mcmc_test(sample, y, a, b, delta, smax, mu0, k0, sig0, indep, lbNumpy, ubNumpy, burnin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_msMK_rinvgamma", (DL_FUNC) &_msMK_rinvgamma, 2},
    {"_msMK_dmsMK", (DL_FUNC) &_msMK_dmsMK, 6},
    {"_msMK_msMK_mcmc_test", (DL_FUNC) &_msMK_msMK_mcmc_test, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_msMK(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
